{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst initialState = {\n  count: 0\n};\nconst userInitialState = {\n  username: 'majy',\n  age: 30\n};\nconst ADD = 'add';\nconst UPDATE_USER = \"UPDATE_USER\"; // 纯函数，没有副作用\n// 有任何更新都要返回新的对象\n// 可以通过 combineReducers合并\n\nfunction countReducer(state = initialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case ADD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + (action.num || 1)\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction userReducer(state = userInitialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case UPDATE_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        username: action.user\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst reducer = combineReducers({\n  counter: countReducer,\n  user: userReducer\n}); // action creater\n\nexport function add(num) {\n  return {\n    type: ADD,\n    num\n  };\n} // async action creater\n\nfunction addAsync(num) {\n  return (dispatch, getState) => {\n    setTimeout(() => {\n      dispatch(add(num));\n    }, 1000);\n  };\n} // store.subscribe(()=>{\n// \tconsole.log('changed',store.getState())\n// })\n// store.dispatch(add(3))\n// store.dispatch(addAsync(4))\n// store.dispatch({type:'add'})\n// store.dispatch({type:'UPDATE_USER',user:'ghge'})\n// 这种方式store有重用的风险\n// export default store\n\n\nexport default function initiallizeStore(state) {\n  const store = createStore(reducer, Object.assign({}, {\n    counter: initialState,\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["/Users/majy/study/next-app/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","initialState","count","userInitialState","username","age","ADD","UPDATE_USER","countReducer","state","action","console","log","type","num","userReducer","user","reducer","counter","add","addAsync","dispatch","getState","setTimeout","initiallizeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE;AADa,CAArB;AAGA,MAAMC,gBAAgB,GAAG;AACxBC,EAAAA,QAAQ,EAAC,MADe;AAExBC,EAAAA,GAAG,EAAE;AAFmB,CAAzB;AAIA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,WAAW,GAAC,aAAlB,C,CACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,KAAK,GAACR,YAA5B,EAAyCS,MAAzC,EAAgD;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,MAAlB;;AACA,UAAOA,MAAM,CAACG,IAAd;AACC,SAAKP,GAAL;AACC,6CAAWG,KAAX;AAAkBP,QAAAA,KAAK,EAACO,KAAK,CAACP,KAAN,IAAaQ,MAAM,CAACI,GAAP,IAAY,CAAzB;AAAxB;;AACD;AACC,aAAOL,KAAP;AAJF;AAMA;;AACD,SAASM,WAAT,CAAqBN,KAAK,GAACN,gBAA3B,EAA4CO,MAA5C,EAAmD;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,MAAlB;;AACA,UAAOA,MAAM,CAACG,IAAd;AACC,SAAKN,WAAL;AACC,6CAAWE,KAAX;AAAkBL,QAAAA,QAAQ,EAACM,MAAM,CAACM;AAAlC;;AACD;AACC,aAAOP,KAAP;AAJF;AAMA;;AAED,MAAMQ,OAAO,GAAGpB,eAAe,CAAC;AAC/BqB,EAAAA,OAAO,EAAEV,YADsB;AAE/BQ,EAAAA,IAAI,EAAED;AAFyB,CAAD,CAA/B,C,CAOA;;AACA,OAAO,SAASI,GAAT,CAAaL,GAAb,EAAiB;AACvB,SAAO;AACND,IAAAA,IAAI,EAACP,GADC;AAENQ,IAAAA;AAFM,GAAP;AAIA,C,CACD;;AACA,SAASM,QAAT,CAAkBN,GAAlB,EAAsB;AACrB,SAAO,CAACO,QAAD,EAAUC,QAAV,KAAqB;AAC3BC,IAAAA,UAAU,CAAC,MAAI;AACdF,MAAAA,QAAQ,CAACF,GAAG,CAACL,GAAD,CAAJ,CAAR;AACA,KAFS,EAER,IAFQ,CAAV;AAGA,GAJD;AAKA,C,CAGD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASU,gBAAT,CAA0Bf,KAA1B,EAAgC;AAC9C,QAAMgB,KAAK,GAAG7B,WAAW,CACxBqB,OADwB,EAExBS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiB;AAChBT,IAAAA,OAAO,EAAEjB,YADO;AAEhBe,IAAAA,IAAI,EAAEb;AAFU,GAAjB,EAGEM,KAHF,CAFwB,EAMxBT,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CANK,CAAzB;AAQA,SAAO0B,KAAP;AACA","sourcesContent":["import {createStore,combineReducers,applyMiddleware} from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nconst initialState = {\n\tcount: 0\n}\nconst userInitialState = {\n\tusername:'majy',\n\tage: 30\n}\nconst ADD = 'add'\nconst UPDATE_USER=\"UPDATE_USER\"\n// 纯函数，没有副作用\n// 有任何更新都要返回新的对象\n// 可以通过 combineReducers合并\nfunction countReducer(state=initialState,action){\n\tconsole.log(state,action)\n\tswitch(action.type){\n\t\tcase ADD:\n\t\t\treturn {...state, count:state.count+(action.num||1)}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nfunction userReducer(state=userInitialState,action){\n\tconsole.log(state,action)\n\tswitch(action.type){\n\t\tcase UPDATE_USER:\n\t\t\treturn {...state, username:action.user}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst reducer = combineReducers({\n\tcounter: countReducer,\n\tuser: userReducer\n})\n\n\n\n// action creater\nexport function add(num){\n\treturn {\n\t\ttype:ADD,\n\t\tnum\n\t}\n}\n// async action creater\nfunction addAsync(num){\n\treturn (dispatch,getState)=>{\n\t\tsetTimeout(()=>{\n\t\t\tdispatch(add(num))\n\t\t},1000)\n\t}\n}\n\n\n// store.subscribe(()=>{\n// \tconsole.log('changed',store.getState())\n// })\n\n// store.dispatch(add(3))\n// store.dispatch(addAsync(4))\n// store.dispatch({type:'add'})\n// store.dispatch({type:'UPDATE_USER',user:'ghge'})\n// 这种方式store有重用的风险\n// export default store\nexport default function initiallizeStore(state){\n\tconst store = createStore(\n\t\treducer,\n\t\tObject.assign({},{\n\t\t\tcounter: initialState,\n\t\t\tuser: userInitialState\n\t\t},state),\n\t\tcomposeWithDevTools(applyMiddleware(ReduxThunk))\n\t)\n\treturn store\n}"]},"metadata":{},"sourceType":"module"}