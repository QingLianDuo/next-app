{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useReducer, memo, useMemo, useCallback } from 'react';\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFun() {\n  // const [count,setCount]=useState(0)\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(countReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('majy'); // useEffect(()=>{\n  // \tlet interval = setInterval(()=>{\n  // \t\tdispatchCount({type:'minus'})\n  // \t\t// setCount(count=>count+1)\n  // \t},1000)\n  // \treturn ()=>clearInterval(interval)\n  // },[])\n  //dom更新到节点之后 useLayoutEffect更新之前\n\n  useEffect(() => {\n    console.log(\"useEffect init\");\n    return () => {\n      console.log(\"useEffect detach\");\n    };\n  }, [name]); // 传入的值有变化才会重新执行useEffect里的事情,每次name变化会重新卸载初始化操作\n  // 优化前\n  // const config = {\n  // \ttext:`count is ${count}`,\n  // \tcolor:count>3?'red':'blue'\n  // }\n  // 优化后\n\n  const config = useMemo(() => ({\n    text: `count is ${count}`,\n    color: count > 3 ? 'red' : 'blue'\n  }), [count]);\n  const handleButtonClick = useCallback(() => dispatchCount({\n    type: 'add'\n  }), [count]);\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(\"button\", {\n    onClick: () => dispatchCount({\n      type: 'minus'\n    })\n  }, count), __jsx(Child, {\n    config: config,\n    onButtonClick: handleButtonClick\n  }));\n} // 每次传入参数变化都要重新渲染，担忧的变化和该组件无关，应该有话\n\n\nconst Child = memo(function Child({\n  onButtonClick,\n  config\n}) {\n  console.log('child render');\n  return __jsx(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n});\nexport default MyCountFun;","map":{"version":3,"sources":["/Users/majy/study/next-app/pages/hook.js"],"names":["React","useState","useEffect","useReducer","memo","useMemo","useCallback","countReducer","state","action","type","MyCountFun","count","dispatchCount","name","setName","console","log","config","text","color","handleButtonClick","e","target","value","Child","onButtonClick"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+CC,IAA/C,EAAqDC,OAArD,EAA8DC,WAA9D,QAAgF,OAAhF;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAA4BC,MAA5B,EAAmC;AAClC,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,KAAL;AACI,aAAOF,KAAK,GAAC,CAAb;;AACJ,SAAK,OAAL;AACC,aAAOA,KAAK,GAAC,CAAb;;AACD;AACC,aAAOA,KAAP;AANF;AAQA;;AAED,SAASG,UAAT,GAAqB;AACpB;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAuBV,UAAU,CAACI,YAAD,EAAc,CAAd,CAAvC;AACA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAMC;AAAN,MAAed,QAAQ,CAAC,MAAD,CAA7B,CAHoB,CAIpB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAI;AACVD,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,KAFD;AAGA,GALQ,EAKP,CAACH,IAAD,CALO,CAAT,CAboB,CAkBX;AACT;AACG;AACA;AACA;AACA;AACA;;AACA,QAAMI,MAAM,GAAGb,OAAO,CAAC,OAAK;AAC3Bc,IAAAA,IAAI,EAAE,YAAWP,KAAM,EADI;AAE3BQ,IAAAA,KAAK,EAACR,KAAK,GAAC,CAAN,GAAQ,KAAR,GAAc;AAFO,GAAL,CAAD,EAGnB,CAACA,KAAD,CAHmB,CAAtB;AAKA,QAAMS,iBAAiB,GAAGf,WAAW,CAAC,MAAIO,aAAa,CAAC;AAACH,IAAAA,IAAI,EAAC;AAAN,GAAD,CAAlB,EAAiC,CAACE,KAAD,CAAjC,CAArC;AAEH,SACC,mBACC;AAAO,IAAA,KAAK,EAAEE,IAAd;AAAoB,IAAA,QAAQ,EAAEQ,CAAC,IAAEP,OAAO,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV;AAAxC,IADD,EAEC;AAAQ,IAAA,OAAO,EAAE,MAAIX,aAAa,CAAC;AAACH,MAAAA,IAAI,EAAC;AAAN,KAAD;AAAlC,KAAqDE,KAArD,CAFD,EAGC,MAAC,KAAD;AAAO,IAAA,MAAM,EAAEM,MAAf;AAAuB,IAAA,aAAa,EAAEG;AAAtC,IAHD,CADD;AAOA,C,CACD;;;AACA,MAAMI,KAAK,GAAGrB,IAAI,CAAC,SAASqB,KAAT,CAAe;AAACC,EAAAA,aAAD;AAAeR,EAAAA;AAAf,CAAf,EAAsC;AACxDF,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SACC;AAAQ,IAAA,OAAO,EAAES,aAAjB;AAAgC,IAAA,KAAK,EAAE;AAACN,MAAAA,KAAK,EAAEF,MAAM,CAACE;AAAf;AAAvC,KAA+DF,MAAM,CAACC,IAAtE,CADD;AAGA,CALiB,CAAlB;AAOA,eAAeR,UAAf","sourcesContent":["import React,{useState, useEffect, useReducer, memo, useMemo, useCallback} from 'react'\n\n\nfunction countReducer(state,action){\n\tswitch(action.type){\n\t\tcase 'add':\n\t\t    return state+1\n\t\tcase 'minus':\n\t\t\treturn state-1\n\t\tdefault:\n\t\t\treturn state    \n\t}\n}\n\nfunction MyCountFun(){\n\t// const [count,setCount]=useState(0)\n\tconst [count, dispatchCount]=useReducer(countReducer,0)\n\tconst [name,setName]=useState('majy')\n\t// useEffect(()=>{\n\t// \tlet interval = setInterval(()=>{\n\t// \t\tdispatchCount({type:'minus'})\n\t// \t\t// setCount(count=>count+1)\n\t// \t},1000)\n\n\t// \treturn ()=>clearInterval(interval)\n\t// },[])\n\t//dom更新到节点之后 useLayoutEffect更新之前\n\tuseEffect(()=>{\n\t\tconsole.log(\"useEffect init\")\n\t\treturn ()=>{\n\t\t\tconsole.log(\"useEffect detach\")\n\t\t}\n\t},[name])// 传入的值有变化才会重新执行useEffect里的事情,每次name变化会重新卸载初始化操作\n\t// 优化前\n    // const config = {\n    // \ttext:`count is ${count}`,\n    // \tcolor:count>3?'red':'blue'\n    // }\n    // 优化后\n    const config = useMemo(()=>({\n    \ttext:`count is ${count}`,\n    \tcolor:count>3?'red':'blue'\n    }),[count])\n\n    const handleButtonClick = useCallback(()=>dispatchCount({type:'add'}),[count])\n\n\treturn (\n\t\t<div>\n\t\t\t<input value={name} onChange={e=>setName(e.target.value)}/>\n\t\t\t<button onClick={()=>dispatchCount({type:'minus'})}>{count}</button>\n\t\t\t<Child config={config} onButtonClick={handleButtonClick}/>\n\t\t</div>\n\t)\n}\n// 每次传入参数变化都要重新渲染，担忧的变化和该组件无关，应该有话\nconst Child = memo(function Child({onButtonClick,config}){\n\tconsole.log('child render')\n\treturn (\n\t\t<button onClick={onButtonClick} style={{color: config.color}}>{config.text}</button>\n\t)\n})\n\nexport default MyCountFun"]},"metadata":{},"sourceType":"module"}