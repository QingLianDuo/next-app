{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useReducer } from 'react';\n\nfunction countReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction MyCountFun() {\n  _s();\n\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setCount(function (count) {\n        return count + 1;\n      });\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return __jsx(\"span\", null, count);\n}\n\n_s(MyCountFun, \"f6rNyXb4nKr8df0VUP2jADfsx6o=\");\n\n_c = MyCountFun;\nexport default MyCountFun;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCountFun\");","map":{"version":3,"sources":["/Users/majy/study/next-app/pages/hook.js"],"names":["React","useState","useEffect","useReducer","countReducer","state","action","type","MyCountFun","count","setCount","interval","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAoD,OAApD;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAA4BC,MAA5B,EAAmC;AAClC,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,KAAL;AACI,aAAOF,KAAK,GAAC,CAAb;;AACJ,SAAK,OAAL;AACC,aAAOA,KAAK,GAAC,CAAb;;AACD;AACC,aAAOA,KAAP;AANF;AAQA;;AAED,SAASG,UAAT,GAAqB;AAAA;;AAAA,kBACGP,QAAQ,CAAC,CAAD,CADX;AAAA,MACbQ,KADa;AAAA,MACPC,QADO;;AAEpBR,EAAAA,SAAS,CAAC,YAAI;AACb,QAAIS,QAAQ,GAAGC,WAAW,CAAC,YAAI;AAC9BF,MAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,eAAEA,KAAK,GAAC,CAAR;AAAA,OAAN,CAAR;AACA,KAFyB,EAExB,IAFwB,CAA1B;AAIA,WAAO;AAAA,aAAII,aAAa,CAACF,QAAD,CAAjB;AAAA,KAAP;AACA,GANQ,EAMP,EANO,CAAT;AAOA,SAAO,oBAAOF,KAAP,CAAP;AACA;;GAVQD,U;;KAAAA,U;AAYT,eAAeA,UAAf","sourcesContent":["import React,{useState, useEffect, useReducer} from 'react'\n\n\nfunction countReducer(state,action){\n\tswitch(action.type){\n\t\tcase 'add':\n\t\t    return state+1\n\t\tcase 'minus':\n\t\t\treturn state-1\n\t\tdefault:\n\t\t\treturn state    \n\t}\n}\n\nfunction MyCountFun(){\n\tconst [count,setCount]=useState(0)\n\tuseEffect(()=>{\n\t\tlet interval = setInterval(()=>{\n\t\t\tsetCount(count=>count+1)\n\t\t},1000)\n\n\t\treturn ()=>clearInterval(interval)\n\t},[])\n\treturn <span>{count}</span>\n}\n\nexport default MyCountFun"]},"metadata":{},"sourceType":"module"}