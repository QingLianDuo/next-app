{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers } from 'redux';\nconst initialState = {\n  count: 0\n};\nconst ADD = 'add'; // 纯函数，没有副作用\n// 有任何更新都要返回新的对象\n// 可以通过 combineReducers合并\n\nfunction reducer(state = initialState, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case ADD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer, initialState);\nconsole.log(store);\nstore.subscribe(() => {\n  console.log('changed', store.getState());\n});\nstore.dispatch({\n  type: 'add'\n});\nstore.dispatch({\n  type: 'add'\n});\nexport default store;","map":{"version":3,"sources":["/Users/majy/study/next-app/store/store.js"],"names":["createStore","combineReducers","initialState","count","ADD","reducer","state","action","console","log","type","store","subscribe","getState","dispatch"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAoBC,eAApB,QAA0C,OAA1C;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE;AADa,CAArB;AAGA,MAAMC,GAAG,GAAG,KAAZ,C,CACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAK,GAACJ,YAAvB,EAAoCK,MAApC,EAA2C;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,MAAlB;;AACA,UAAOA,MAAM,CAACG,IAAd;AACC,SAAKN,GAAL;AACC,6CAAWE,KAAX;AAAkBH,QAAAA,KAAK,EAACG,KAAK,CAACH,KAAN,GAAY;AAApC;;AACD;AACC,aAAOG,KAAP;AAJF;AAMA;;AACD,MAAMK,KAAK,GAAGX,WAAW,CAACK,OAAD,EAASH,YAAT,CAAzB;AAEAM,OAAO,CAACC,GAAR,CAAYE,KAAZ;AAEAA,KAAK,CAACC,SAAN,CAAgB,MAAI;AACnBJ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBE,KAAK,CAACE,QAAN,EAAtB;AACA,CAFD;AAIAF,KAAK,CAACG,QAAN,CAAe;AAACJ,EAAAA,IAAI,EAAC;AAAN,CAAf;AACAC,KAAK,CAACG,QAAN,CAAe;AAACJ,EAAAA,IAAI,EAAC;AAAN,CAAf;AAEA,eAAeC,KAAf","sourcesContent":["import {createStore,combineReducers} from 'redux'\n\nconst initialState = {\n\tcount: 0\n}\nconst ADD = 'add'\n// 纯函数，没有副作用\n// 有任何更新都要返回新的对象\n// 可以通过 combineReducers合并\nfunction reducer(state=initialState,action){\n\tconsole.log(state,action)\n\tswitch(action.type){\n\t\tcase ADD:\n\t\t\treturn {...state, count:state.count+1}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nconst store = createStore(reducer,initialState)\n\nconsole.log(store)\n\nstore.subscribe(()=>{\n\tconsole.log('changed',store.getState())\n})\n\nstore.dispatch({type:'add'})\nstore.dispatch({type:'add'})\n\nexport default store"]},"metadata":{},"sourceType":"module"}