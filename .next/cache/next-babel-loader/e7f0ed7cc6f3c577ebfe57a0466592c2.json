{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\n\nclass MyCount extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: MyCountFun()\n    });\n  }\n\n  render() {\n    return __jsx(\"span\", null, this.state.count);\n  }\n\n}\n\nfunction MyCountFun() {\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  return __jsx(\"span\", null, count);\n}\n\nexport default MyCountFun;","map":{"version":3,"sources":["/Users/majy/study/next-app/pages/hook.js"],"names":["React","useState","useEffect","MyCount","Component","count","MyCountFun","render","state","setCount","interval","setInterval","clearInterval"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;AAEA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAqC;AAAA;AAAA;;AAAA,mCAC9B;AACLC,MAAAA,KAAK,EAACC,UAAU;AADX,KAD8B;AAAA;;AAIpCC,EAAAA,MAAM,GAAE;AACP,WAAO,oBAAO,KAAKC,KAAL,CAAWH,KAAlB,CAAP;AACA;;AANmC;;AASrC,SAASC,UAAT,GAAqB;AACpB,QAAM;AAAA,OAACD,KAAD;AAAA,OAAOI;AAAP,MAAiBR,QAAQ,CAAC,CAAD,CAA/B;AACAC,EAAAA,SAAS,CAAC,MAAI;AACb,UAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAI;AAChCF,MAAAA,QAAQ,CAACJ,KAAK,GAAC,CAAP,CAAR;AACA,KAF2B,EAE1B,IAF0B,CAA5B;AAIA,WAAO,MAAIO,aAAa,CAACF,QAAD,CAAxB;AACA,GANQ,CAAT;AAOA,SAAO,oBAAOL,KAAP,CAAP;AACA;;AAED,eAAeC,UAAf","sourcesContent":["import React,{useState, useEffect} from 'react'\n\nclass MyCount extends React.Component{\n\tstate={\n\t\tcount:MyCountFun()\n\t}\n\trender(){\n\t\treturn <span>{this.state.count}</span>\n\t}\n}\n\nfunction MyCountFun(){\n\tconst [count,setCount]=useState(0)\n\tuseEffect(()=>{\n\t\tconst interval = setInterval(()=>{\n\t\t\tsetCount(count+1)\n\t\t},1000)\n\n\t\treturn ()=>clearInterval(interval)\n\t})\n\treturn <span>{count}</span>\n}\n\nexport default MyCountFun"]},"metadata":{},"sourceType":"module"}